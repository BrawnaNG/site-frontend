# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Brawna Frontend Staging

on:
  push:
    branches: [ "staging" ]

# See https://github.com/mnapoli/github-to-aws for how the AWS credentials work
permissions:
    id-token: write # This is required for requesting the JWT
    contents: read  # This is required for actions/checkout

jobs:
  build-and-deploy:

    runs-on: ubuntu-latest
    environment: staging

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::413022200594:role/github-deploy-brawnang-site-frontend
        role-session-name: github-deploy
        aws-region: us-east-1


    - name: Build Node.js site
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
      env:
        VITE_API_URL: ${{ vars.VITE_API_URL }}
        VITE_CORS_ORIGIN: ${{ vars.VITE_CORS_ORIGIN }}
        VITE_ALLOWED_HOSTS: ${{ vars.VITE_ALLOWED_HOSTS }}
        VITE_RECAPTCHA_SITE_KEY: ${{ secrets.VITE_RECAPTCHA_SITE_KEY }}
    - run: yarn
    - run: npm run build --if-present
    - run: |
        env | grep VITE

    - name: Open SG
      env:
        SEC_GROUP_ID: ${{ vars.SEC_GROUP_ID }}
        SEC_GROUP_RULE_ID: ${{ vars.SEC_GROUP_RULE_ID }}
      run: bash devops/open-sg.sh

    - name: Deploy
      env:
        PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        HOSTNAME: ${{ secrets.SSH_HOST }}
        USER_NAME: ${{ secrets.SSH_USER }}
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        scp -o StrictHostKeyChecking=no -i private_key -r dist ${USER_NAME}@${HOSTNAME}:dist-new
        ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
        mv ~/dist-new /var/www/stage.brawna.org/frontend/dist-new
        sudo rm -rf /var/www/stage.brawna.org/frontend/dist-old
        mv /var/www/stage.brawna.org/frontend/dist /var/www/stage.brawna.org/frontend/dist-old
        mv /var/www/stage.brawna.org/frontend/dist-new /var/www/stage.brawna.org/frontend/dist
        sudo apache2ctl graceful '

    - name: Close Security Group
      if: always()
      env:
        SEC_GROUP_ID: ${{ vars.SEC_GROUP_ID }}
        SEC_GROUP_RULE_ID: ${{ vars.SEC_GROUP_RULE_ID }}
      run: bash devops/close-sg.sh
